// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TesteFortes.Data.Context;

#nullable disable

namespace TesteFortes.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220918225259_Carga2")]
    partial class Carga2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TesteFortes.Domain.Entities.Fornecedor", b =>
                {
                    b.Property<int>("FornecedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FornecedorId"), 1L, 1);

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("EmailContato")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NomeContato")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.HasKey("FornecedorId");

                    b.ToTable("Fornecedor");

                    b.HasData(
                        new
                        {
                            FornecedorId = 1,
                            CNPJ = "00123456000190",
                            EmailContato = "jsilva@atlasinf.com.br",
                            NomeContato = "Josias Benedito Silva",
                            RazaoSocial = "Atlas Suplimentos de Informática Ltda",
                            UF = "SP"
                        });
                });

            modelBuilder.Entity("TesteFortes.Domain.Entities.ItensPedido", b =>
                {
                    b.Property<int>("ItensPedidoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItensPedidoId"), 1L, 1);

                    b.Property<int>("PedidoId")
                        .HasColumnType("int");

                    b.Property<int?>("PedidoId1")
                        .HasColumnType("int");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ItensPedidoId");

                    b.HasIndex("PedidoId");

                    b.HasIndex("PedidoId1");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ItensPedido");
                });

            modelBuilder.Entity("TesteFortes.Domain.Entities.Pedido", b =>
                {
                    b.Property<int>("PedidoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PedidoId"), 1L, 1);

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataPedido")
                        .HasColumnType("datetime2");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PedidoId");

                    b.HasIndex("FornecedorId");

                    b.ToTable("Pedido");
                });

            modelBuilder.Entity("TesteFortes.Domain.Entities.Produto", b =>
                {
                    b.Property<int>("ProdutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProdutoId"), 1L, 1);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Valor")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProdutoId");

                    b.ToTable("Produto");

                    b.HasData(
                        new
                        {
                            ProdutoId = 1,
                            Codigo = "AX001",
                            DataCadastro = new DateTime(2022, 9, 18, 19, 52, 58, 766, DateTimeKind.Local).AddTicks(7379),
                            Descricao = "Monitor HDTV 20 Genérico",
                            Valor = 405.99m
                        },
                        new
                        {
                            ProdutoId = 2,
                            Codigo = "AX301",
                            DataCadastro = new DateTime(2022, 9, 18, 19, 52, 58, 766, DateTimeKind.Local).AddTicks(7388),
                            Descricao = "Webcam Stylus 1080p",
                            Valor = 62.90m
                        },
                        new
                        {
                            ProdutoId = 3,
                            Codigo = "BC401",
                            DataCadastro = new DateTime(2022, 9, 18, 19, 52, 58, 766, DateTimeKind.Local).AddTicks(7390),
                            Descricao = "Mesa escritório 1,60 Prime",
                            Valor = 399.00m
                        },
                        new
                        {
                            ProdutoId = 4,
                            Codigo = "BD112",
                            DataCadastro = new DateTime(2022, 9, 18, 19, 52, 58, 766, DateTimeKind.Local).AddTicks(7391),
                            Descricao = "Mouse Microsoft 4 botões",
                            Valor = 110.00m
                        });
                });

            modelBuilder.Entity("TesteFortes.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 9, 18, 19, 52, 58, 766, DateTimeKind.Local).AddTicks(6379));

                    b.Property<int>("CreatedUser")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedData")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedUser")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2022, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUser = 0,
                            Id = 0,
                            IsActive = true,
                            Name = "Silvio Agostinho",
                            UpdatedUser = 0
                        });
                });

            modelBuilder.Entity("TesteFortes.Domain.Entities.ItensPedido", b =>
                {
                    b.HasOne("TesteFortes.Domain.Entities.Pedido", null)
                        .WithMany("ItensPedido")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TesteFortes.Domain.Entities.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoId1");

                    b.HasOne("TesteFortes.Domain.Entities.Produto", "Produto")
                        .WithMany("ItensPedido")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("TesteFortes.Domain.Entities.Pedido", b =>
                {
                    b.HasOne("TesteFortes.Domain.Entities.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("TesteFortes.Domain.Entities.Pedido", b =>
                {
                    b.Navigation("ItensPedido");
                });

            modelBuilder.Entity("TesteFortes.Domain.Entities.Produto", b =>
                {
                    b.Navigation("ItensPedido");
                });
#pragma warning restore 612, 618
        }
    }
}
